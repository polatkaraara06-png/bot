import os, json, time, socket, threading
from websocket import WebSocketApp
from dotenv import load_dotenv
from ..shared_state import shared_state

# IPv4 erzwingen
_orig_getaddrinfo = socket.getaddrinfo
def _only_ipv4(*a, **k):
    return [r for r in _orig_getaddrinfo(*a, **k) if r[0] == socket.AF_INET]
socket.getaddrinfo = _only_ipv4

load_dotenv()

WSS_URL = os.getenv("WSS_URL_SPOT", "wss://stream.bybit.com/v5/public/spot")

# Universum (50)
BASE_UNIVERSE = [
    "BTCUSDT","ETHUSDT","SOLUSDT","BNBUSDT","XRPUSDT","ADAUSDT","DOGEUSDT",
    "TRXUSDT","MATICUSDT","DOTUSDT","LTCUSDT","BCHUSDT","ATOMUSDT","LINKUSDT",
    "XLMUSDT","XMRUSDT","APTUSDT","ARBUSDT","OPUSDT","NEARUSDT","ICPUSDT",
    "FTMUSDT","INJUSDT","SUIUSDT","HBARUSDT","ALGOUSDT","GALAUSDT","SANDUSDT",
    "AXSUSDT","APEUSDT","RNDRUSDT","PEPEUSDT","SHIBUSDT","TONUSDT","FLOWUSDT",
    "EGLDUSDT","CRVUSDT","AAVEUSDT","DYDXUSDT","FILUSDT","BLURUSDT","STXUSDT",
    "ONEUSDT","RUNEUSDT","ETCUSDT","KASUSDT","SEIUSDT","TIAUSDT"
]

def _on_message(ws, msg):
    try:
        data = json.loads(msg)
    except Exception:
        return

    topic = data.get("topic","")
    now = time.time()

    # Bybit V5: topic == "tickers.SYMBOL"  (ohne "public/")
    if topic.startswith("tickers."):
        arr = data.get("data")
        if isinstance(arr, dict):
            arr = [arr]
        cnt = 0
        for it in arr or []:
            sym = (it.get("symbol") or "").upper()
            last = it.get("lastPrice") or it.get("price")
            if sym and last:
                try:
                    shared_state.upsert_tick("spot", sym, float(last), now)
                    cnt += 1
                except Exception as e:
                    print("[WSS-SPOT] upsert_tick error:", e)
        if cnt:
            shared_state.ws_status["spot"] = "connected"
            # dezentes sichtbares Logging
            first = (arr or [{}])[0].get("symbol","?")
            print(f"[WSS-SPOT] +{cnt} Tick(s) gespeichert (z.B. {first})")
        return

    # keep-alives
    if "op" in data and data.get("op") == "ping":
        try:
            ws.send(json.dumps({"op":"pong"}))
        except Exception:
            pass

def _on_open(ws):
    # WICHTIG: korrekte Topics! -> "tickers.SYMBOL"
    subs = [f"tickers.{s}" for s in BASE_UNIVERSE]
    ws.send(json.dumps({"op":"subscribe","args":subs}))
    shared_state.ws_status["spot"] = "subscribed"
    print(f"[WSS-SPOT] Subscribed to {len(BASE_UNIVERSE)} symbols (tickers.*).")

def _on_error(ws, e):
    shared_state.ws_status["spot"] = f"error:{e}"
    print("[WSS-SPOT] ‚ùå", e)

def _on_close(ws,*a):
    shared_state.ws_status["spot"] = "disconnected"
    print("[WSS-SPOT] closed")

def run():
    # eigener Thread + Reconnect (nur WSS)
    def loop():
        while True:
            try:
                print(f"[WSS-SPOT] Connecting to {WSS_URL}")
                ws = WebSocketApp(
                    WSS_URL,
                    on_open=_on_open,
                    on_message=_on_message,
                    on_error=_on_error,
                    on_close=_on_close
                )
                ws.run_forever(ping_interval=20, ping_timeout=10)
            except Exception as e:
                print("[WSS-SPOT] crash:", e)
            time.sleep(3)
    threading.Thread(target=loop, daemon=True, name="SpotWS").start()
